{"ast":null,"code":"var _jsxFileName = \"/Users/nikitarukoleev/Desktop/app-weather/src/App.js\",\n    _s = $RefreshSig$();\n\n// для градуса &deg;\n// для иконки openweathermap.org/img/wn/${data.weather.icon}@2x.png путь \n// сделать крестик\n// закрытие блока поиска при клике на другую область \nimport React from 'react';\nimport axios from 'axios';\nimport DATA_CITIES from './arrayItemsCities.json';\nimport './App.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst filterCity = (searchText, listOfCity) => {\n  if (!searchText) return listOfCity;\n  return listOfCity.filter(_ref => {\n    let {\n      city\n    } = _ref;\n    return city.toLowerCase().includes(searchText.toLowerCase());\n  });\n};\n\nfunction App() {\n  _s();\n\n  const [data, setData] = React.useState([]);\n  const [geoPosition, setGeoPosition] = React.useState([]);\n  const [displaySearchResults, setDisplaySearchResults] = React.useState(false); // const [cityName, setCityName] = React.useState('');\n\n  const [searchValue, setSearchValue] = React.useState('');\n  const filtredItemsArrayCities = DATA_CITIES.filter(item => item.hasOwnProperty('city'));\n  React.useEffect(() => {\n    const debounce = setTimeout(() => {\n      const filtredCity = filterCity(searchValue, filtredItemsArrayCities);\n      setData(filtredCity);\n    }, 300);\n    return () => clearTimeout(debounce);\n  }, [searchValue]); // React.useEffect(() => {\n  //   console.log(geoPosition);\n  //   try {\n  //     axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${geoPosition[0]}&lon=${geoPosition[1]}&units=metric&appid=${process.env.REACT_APP_OPENWEATHER_KEY}`).then(res => setData(res.data));\n  //   } catch(error) {\n  //     console.log(error);\n  //   }\n  // }, [geoPosition]);\n\n  const getDataWeather = arrGeoData => {\n    console.log();\n\n    try {\n      axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${geoPosition[0]}&lon=${geoPosition[1]}&units=metric&appid=${process.env.REACT_APP_OPENWEATHER_KEY}`).then(res => setData(res.data));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handlerClick = e => {\n    let cityName = e.target.textContent;\n    filtredItemsArrayCities.forEach((item, index) => {\n      if (cityName === item.city) {\n        getDataWeather([item.geo_lat, item.geo_lon]);\n      }\n    });\n    setSearchValue(cityName);\n    setDisplaySearchResults(false); // setCityName(cityName);\n  };\n\n  const onChangeSearchInput = e => {\n    setSearchValue(e.target.value);\n    setDisplaySearchResults(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searchBar\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: onChangeSearchInput,\n          className: \"searchInput\",\n          value: searchValue,\n          type: \"text\",\n          placeholder: \"\\u0432\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0433\\u043E\\u0440\\u043E\\u0434...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"searchResults \" + (displaySearchResults ? \"visible\" : null),\n          children: data.length ? data.slice(0, 5).map((dataCity, index) => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"searchResults-item\",\n              onClick: handlerClick,\n              children: dataCity.city\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 22\n            }, this);\n          }) : /*#__PURE__*/_jsxDEV(\"li\", {\n            children: 'город не найден...'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"WrGrkuAX1thnBXJdn6ZSdD+BmPs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/nikitarukoleev/Desktop/app-weather/src/App.js"],"names":["React","axios","DATA_CITIES","filterCity","searchText","listOfCity","filter","city","toLowerCase","includes","App","data","setData","useState","geoPosition","setGeoPosition","displaySearchResults","setDisplaySearchResults","searchValue","setSearchValue","filtredItemsArrayCities","item","hasOwnProperty","useEffect","debounce","setTimeout","filtredCity","clearTimeout","getDataWeather","arrGeoData","console","log","get","process","env","REACT_APP_OPENWEATHER_KEY","then","res","error","handlerClick","e","cityName","target","textContent","forEach","index","geo_lat","geo_lon","onChangeSearchInput","value","length","slice","map","dataCity"],"mappings":"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","sourcesContent":["// для градуса &deg;\n// для иконки openweathermap.org/img/wn/${data.weather.icon}@2x.png путь \n// сделать крестик\n// закрытие блока поиска при клике на другую область \n\nimport React from 'react';\nimport axios from 'axios';\nimport DATA_CITIES from './arrayItemsCities.json'\n\nimport './App.scss';\n\nconst filterCity = (searchText, listOfCity) => {\n  if (!searchText) return listOfCity;\n  \n  return listOfCity.filter(({ city }) => city.toLowerCase().includes(searchText.toLowerCase()));\n}\n\nfunction App() {\n  const [data, setData] = React.useState([]); \n  const [geoPosition, setGeoPosition] = React.useState([]); \n  const [displaySearchResults, setDisplaySearchResults] = React.useState(false);\n  // const [cityName, setCityName] = React.useState('');\n  const [searchValue, setSearchValue] = React.useState(''); \n\n  const filtredItemsArrayCities = DATA_CITIES.filter(item => item.hasOwnProperty('city'));\n\n  React.useEffect(() => {\n    const debounce = setTimeout(() => {\n      const filtredCity = filterCity(searchValue, filtredItemsArrayCities);\n      setData(filtredCity);\n    }, 300);\n\n    return () => clearTimeout(debounce)\n  }, [searchValue]);\n\n\n  // React.useEffect(() => {\n  //   console.log(geoPosition);\n  //   try {\n  //     axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${geoPosition[0]}&lon=${geoPosition[1]}&units=metric&appid=${process.env.REACT_APP_OPENWEATHER_KEY}`).then(res => setData(res.data));\n  //   } catch(error) {\n  //     console.log(error);\n  //   }\n  // }, [geoPosition]);\n\n  const getDataWeather = (arrGeoData) => {\n    console.log();\n    try {\n      axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${geoPosition[0]}&lon=${geoPosition[1]}&units=metric&appid=${process.env.REACT_APP_OPENWEATHER_KEY}`).then(res => setData(res.data));\n    } catch(error) {\n      console.log(error);\n    }\n  }\n\n  const handlerClick = (e) => {\n    let cityName = e.target.textContent;\n\n    filtredItemsArrayCities.forEach((item, index) => {\n      if (cityName === item.city) {\n        getDataWeather([item.geo_lat, item.geo_lon]);\n      }\n    }) \n\n    setSearchValue(cityName);\n    setDisplaySearchResults(false);\n    // setCityName(cityName);\n  }\n\n  const onChangeSearchInput = (e) => {\n    setSearchValue(e.target.value);\n    setDisplaySearchResults(true);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"searchBar\">\n          <input onChange={onChangeSearchInput} className=\"searchInput\" value={searchValue} type=\"text\" placeholder=\"введите город...\"/> \n          <ul className={\"searchResults \" + (displaySearchResults ? \"visible\" : null)}>\n            { \n            data.length ? data.slice(0, 5).map((dataCity, index) => {\n              return <li key={index}className=\"searchResults-item\" onClick={handlerClick}>{dataCity.city}</li>\n            }) : <li>{'город не найден...'}</li> \n            } \n          </ul>\n    \n        </div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}