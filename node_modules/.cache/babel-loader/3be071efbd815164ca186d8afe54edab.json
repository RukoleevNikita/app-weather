{"ast":null,"code":"var _jsxFileName = \"/Users/nikitarukoleev/Desktop/app-weather/src/App.js\",\n    _s = $RefreshSig$();\n\n// закрытие блока поиска при клике на другую область \n//! переписать directionDetermination\n// переключение на Фарингейт\nimport React from 'react';\nimport axios from 'axios';\nimport Header from './components/Header/Header';\nimport Main from './components/Main/Main';\nimport Footer from './components/Footer/Footer';\nimport DATA_CITIES from './arrayItemsCities.json';\nimport './App.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TemperContext = /*#__PURE__*/React.createContext(); // контекст для Main \n\nfunction App() {\n  _s();\n\n  const [russianCitiesData, setRussianCitiesData] = React.useState([]);\n  const [dataWeatherCity, setDataWeatherCity] = React.useState({});\n  const [viewDataWeatherCity, setViewDataWeatherCity] = React.useState(false);\n  const [dropdownListOnInput, setDropdownListOnInput] = React.useState(false);\n  const [cityName, setCityName] = React.useState('');\n  const [searchValue, setSearchValue] = React.useState('');\n  const [directionWind, setDirectionWind] = React.useState('');\n  const [tempFormatHandler, setTempFormatHandler] = React.useState(true); // флаг для показа Цельсия или Фаренгейта\n\n  const filtredItemsArrayCities = DATA_CITIES.filter(item => item.hasOwnProperty('city'));\n\n  const filterCity = (searchText, listOfCity) => {\n    if (!searchText) {\n      setDisplaySearchResults(false);\n      return listOfCity;\n    }\n\n    return listOfCity.filter(_ref => {\n      let {\n        city\n      } = _ref;\n      return city.toLowerCase().includes(searchText.toLowerCase());\n    });\n  };\n\n  React.useEffect(() => {\n    const debounce = setTimeout(() => {\n      const filtredCity = filterCity(searchValue, filtredItemsArrayCities);\n      setRussianCitiesData(filtredCity);\n    }, 300);\n    return () => clearTimeout(debounce);\n  }, [searchValue]);\n\n  const getDataWeather = arrGeoPositionData => {\n    try {\n      axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${arrGeoPositionData[0]}&lon=${arrGeoPositionData[1]}&units=metric&lang=ru&appid=${process.env.REACT_APP_OPENWEATHER_KEY}`).then(res => {\n        setDataWeatherCity(res.data);\n        setViewDataWeatherCity(true);\n        directionDetermination(res.data.wind.deg);\n        console.log(res.data);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handlerClickOnCity = e => {\n    let cityName = e.target.textContent;\n    setCityName(cityName);\n    filtredItemsArrayCities.forEach((item, index) => {\n      if (cityName === item.city) {\n        getDataWeather([item.geo_lat, item.geo_lon]);\n      }\n    });\n    setSearchValue(cityName);\n    setDropdownListOnInput(false);\n  };\n\n  const onChangeSearchInput = e => {\n    setSearchValue(e.target.value);\n    setDropdownListOnInput(true);\n  };\n\n  const changeCity = () => {\n    setCityName(false);\n    setSearchValue('');\n    setViewDataWeatherCity(false);\n  };\n\n  const toggleTempFormatHandler = () => setTempFormatHandler(prev => !prev); // смена стейта для переключателя \n\n\n  function directionDetermination(temp) {\n    //!!!!!!!!!\n    if (Number(temp) >= 191.25 && Number(temp) <= 236.25) setDirectionWind('юго-заподный');\n    if (Number(temp) >= 348.75 && Number(temp) <= 11.25) setDirectionWind('северный');\n    if (Number(temp) >= 11.25 && Number(temp) <= 78.75) setDirectionWind('северо-восточный');\n    if (Number(temp) >= 78.75 && Number(temp) <= 101.25) setDirectionWind('восточный');\n    if (Number(temp) >= 168.75 && Number(temp) <= 191.25) setDirectionWind('южный');\n    if (Number(temp) >= 281.25 && Number(temp) <= 348.75) setDirectionWind('северо-западный');\n    if (Number(temp) >= 258.75 && Number(temp) <= 281.25) setDirectionWind('западный');\n    if (Number(temp) >= 101.25 && Number(temp) <= 146.25) setDirectionWind('юго-восточный');\n  }\n\n  return /*#__PURE__*/_jsxDEV(TemperContext.Provider, {\n    value: tempFormatHandler,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        cityName: cityName,\n        onChangeSearchInput: onChangeSearchInput,\n        searchValue: searchValue,\n        changeCity: changeCity,\n        displaySearchResults: displaySearchResults,\n        russianCitiesData: russianCitiesData,\n        handlerClickOnCity: handlerClickOnCity,\n        setSearchValue: setSearchValue,\n        toggleTempFormatHandler: toggleTempFormatHandler // handlerCelsius={handlerCelsius}\n        // habdlerFahrenheit={habdlerFahrenheit}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Main, {\n        viewDataWeatherCity: viewDataWeatherCity,\n        dataWeatherCity: dataWeatherCity // celsius={celsius}\n        // fahrenheit={fahrenheit}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        viewDataWeatherCity: viewDataWeatherCity,\n        dataWeatherCity: dataWeatherCity,\n        directionWind: directionWind\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"LnQbLtxJbVKc7+gziJTEEyIBjNk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/nikitarukoleev/Desktop/app-weather/src/App.js"],"names":["React","axios","Header","Main","Footer","DATA_CITIES","TemperContext","createContext","App","russianCitiesData","setRussianCitiesData","useState","dataWeatherCity","setDataWeatherCity","viewDataWeatherCity","setViewDataWeatherCity","dropdownListOnInput","setDropdownListOnInput","cityName","setCityName","searchValue","setSearchValue","directionWind","setDirectionWind","tempFormatHandler","setTempFormatHandler","filtredItemsArrayCities","filter","item","hasOwnProperty","filterCity","searchText","listOfCity","setDisplaySearchResults","city","toLowerCase","includes","useEffect","debounce","setTimeout","filtredCity","clearTimeout","getDataWeather","arrGeoPositionData","get","process","env","REACT_APP_OPENWEATHER_KEY","then","res","data","directionDetermination","wind","deg","console","log","error","handlerClickOnCity","e","target","textContent","forEach","index","geo_lat","geo_lon","onChangeSearchInput","value","changeCity","toggleTempFormatHandler","prev","temp","Number","displaySearchResults"],"mappings":"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","sourcesContent":["// закрытие блока поиска при клике на другую область \n//! переписать directionDetermination\n// переключение на Фарингейт\n\nimport React from 'react';\nimport axios from 'axios';\n\nimport Header from './components/Header/Header';\nimport Main from './components/Main/Main';\nimport Footer from './components/Footer/Footer';\n\nimport DATA_CITIES from './arrayItemsCities.json'\n\nimport './App.scss';\n\nexport const TemperContext = React.createContext(); // контекст для Main \n\nfunction App() {\n  const [russianCitiesData, setRussianCitiesData] = React.useState([]); \n  const [dataWeatherCity, setDataWeatherCity] = React.useState({}); \n  const [viewDataWeatherCity, setViewDataWeatherCity] = React.useState(false); \n  const [dropdownListOnInput, setDropdownListOnInput] = React.useState(false);\n  const [cityName, setCityName] = React.useState('');\n  const [searchValue, setSearchValue] = React.useState(''); \n  const [directionWind, setDirectionWind] = React.useState('');\n\n  const [tempFormatHandler, setTempFormatHandler] = React.useState(true); // флаг для показа Цельсия или Фаренгейта\n\n  const filtredItemsArrayCities = DATA_CITIES.filter(item => item.hasOwnProperty('city'));\n\n  const filterCity = (searchText, listOfCity) => {\n    if (!searchText) {\n      setDisplaySearchResults(false);\n      return listOfCity;\n    }\n    \n    return listOfCity.filter(({ city }) => city.toLowerCase().includes(searchText.toLowerCase()));\n  }\n\n  React.useEffect(() => {\n    const debounce = setTimeout(() => {\n      const filtredCity = filterCity(searchValue, filtredItemsArrayCities);\n      setRussianCitiesData(filtredCity);\n    }, 300);\n\n    return () => clearTimeout(debounce)\n  }, [searchValue]);\n\n  const getDataWeather = (arrGeoPositionData) => {\n    try {\n      axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${arrGeoPositionData[0]}&lon=${arrGeoPositionData[1]}&units=metric&lang=ru&appid=${process.env.REACT_APP_OPENWEATHER_KEY}`).then(res => {\n        setDataWeatherCity(res.data);\n        setViewDataWeatherCity(true);\n        directionDetermination(res.data.wind.deg);\n        console.log(res.data);\n      });\n    } catch(error) {\n      console.log(error);\n    }\n  }\n\n  const handlerClickOnCity = (e) => {\n    let cityName = e.target.textContent;\n\n    setCityName(cityName);\n\n    filtredItemsArrayCities.forEach((item, index) => {\n      if (cityName === item.city) {\n        getDataWeather([item.geo_lat, item.geo_lon]);\n      }\n    }) \n\n    setSearchValue(cityName);\n    setDropdownListOnInput(false);\n  }\n\n  const onChangeSearchInput = (e) => {\n    setSearchValue(e.target.value);\n    setDropdownListOnInput(true);\n  }\n\n  const changeCity = () => {\n    setCityName(false);\n    setSearchValue('');\n    setViewDataWeatherCity(false);\n  }\n\n  const toggleTempFormatHandler = () => setTempFormatHandler(prev => !prev); // смена стейта для переключателя \n  \n  function directionDetermination(temp) { //!!!!!!!!!\n    if ( Number(temp) >= 191.25  && Number(temp) <= 236.25 ) setDirectionWind('юго-заподный');\n    if ( Number(temp) >= 348.75  && Number(temp) <= 11.25 ) setDirectionWind('северный');\n    if ( Number(temp) >= 11.25 && Number(temp) <= 78.75 ) setDirectionWind('северо-восточный');\n    if ( Number(temp) >= 78.75  && Number(temp) <= 101.25 ) setDirectionWind('восточный');\n    if ( Number(temp) >= 168.75 && Number(temp) <= 191.25 ) setDirectionWind('южный');\n    if ( Number(temp) >= 281.25  && Number(temp) <= 348.75 ) setDirectionWind('северо-западный');\n    if ( Number(temp) >= 258.75  && Number(temp) <= 281.25 ) setDirectionWind('западный');\n    if ( Number(temp) >= 101.25  && Number(temp) <= 146.25 ) setDirectionWind('юго-восточный');\n  }\n\n\n  return (\n    <TemperContext.Provider value={tempFormatHandler}>\n      <div className=\"App\">\n        <Header\n          cityName={cityName}\n          onChangeSearchInput={onChangeSearchInput}\n          searchValue={searchValue}\n          changeCity={changeCity}\n          displaySearchResults={displaySearchResults}\n          russianCitiesData={russianCitiesData}\n          handlerClickOnCity={handlerClickOnCity}\n          setSearchValue={setSearchValue}\n          toggleTempFormatHandler={toggleTempFormatHandler}\n          // handlerCelsius={handlerCelsius}\n          // habdlerFahrenheit={habdlerFahrenheit}\n    \n        />\n\n        <Main \n          viewDataWeatherCity={viewDataWeatherCity}\n          dataWeatherCity={dataWeatherCity}\n          // celsius={celsius}\n          // fahrenheit={fahrenheit}\n        />\n\n        <Footer \n          viewDataWeatherCity={viewDataWeatherCity}\n          dataWeatherCity={dataWeatherCity}\n          directionWind={directionWind}\n        />\n      </div>\n    </TemperContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}