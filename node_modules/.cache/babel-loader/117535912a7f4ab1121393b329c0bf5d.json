{"ast":null,"code":"var _jsxFileName = \"/Users/nikitarukoleev/Desktop/app-weather/src/App.js\",\n    _s = $RefreshSig$();\n\n// для градуса &deg;\n// сделать крестик\n// закрытие блока поиска при клике на другую область \n// разобраться с местоположением\n// вывести погоду и все данные \nimport React from 'react';\nimport axios from 'axios';\nimport Header from './components/Header/Header';\nimport Main from './components/Main/Main';\nimport Footer from './components/Footer/Footer';\nimport DATA_CITIES from './arrayItemsCities.json';\nimport './App.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [russianCitiesData, setRussianCitiesData] = React.useState([]);\n  const [dataWeatherCity, setDataWeatherCity] = React.useState({});\n  const [viewDataWeatherCity, setViewDataWeatherCity] = React.useState(false);\n  const [displaySearchResults, setDisplaySearchResults] = React.useState(false);\n  const [cityName, setCityName] = React.useState('');\n  const [searchValue, setSearchValue] = React.useState('');\n  console.log(dataWeatherCity.main);\n  const filtredItemsArrayCities = DATA_CITIES.filter(item => item.hasOwnProperty('city'));\n\n  const filterCity = (searchText, listOfCity) => {\n    if (!searchText) {\n      setDisplaySearchResults(false);\n      return listOfCity;\n    }\n\n    return listOfCity.filter(_ref => {\n      let {\n        city\n      } = _ref;\n      return city.toLowerCase().includes(searchText.toLowerCase());\n    });\n  };\n\n  React.useEffect(() => {\n    const debounce = setTimeout(() => {\n      const filtredCity = filterCity(searchValue, filtredItemsArrayCities);\n      setRussianCitiesData(filtredCity);\n    }, 300);\n    return () => clearTimeout(debounce);\n  }, [searchValue]);\n\n  const generatingObjectWithWeatherData = objData => {// console.log(objData);\n    // if (objData.length) {\n    //   for(key in objData) {\n    //     console.log(key);\n    //   }\n    // }\n  };\n\n  const getDataWeather = arrGeoPositionData => {\n    try {\n      axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${arrGeoPositionData[0]}&lon=${arrGeoPositionData[1]}&units=metric&lang=ru&appid=${process.env.REACT_APP_OPENWEATHER_KEY}`).then(res => {\n        setDataWeatherCity(res.data); // передача в хук объекта api\n\n        setViewDataWeatherCity(res.data);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }; // обработчик клика на элемент списка\n\n\n  const handlerClickOnCity = e => {\n    let cityName = e.target.textContent;\n    setCityName(cityName);\n    filtredItemsArrayCities.forEach((item, index) => {\n      if (cityName === item.city) {\n        getDataWeather([item.geo_lat, item.geo_lon]);\n      }\n    });\n    setSearchValue(cityName);\n    setDisplaySearchResults(false); // setCityName(cityName);\n  };\n\n  const onChangeSearchInput = e => {\n    setSearchValue(e.target.value);\n    setDisplaySearchResults(true);\n  };\n\n  const changeCity = () => {\n    setCityName(false);\n    setSearchValue('');\n    setViewDataWeatherCity(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      cityName: cityName,\n      onChangeSearchInput: onChangeSearchInput,\n      searchValue: searchValue,\n      changeCity: changeCity,\n      displaySearchResults: displaySearchResults,\n      russianCitiesData: russianCitiesData,\n      handlerClickOnCity: handlerClickOnCity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Main, {\n      viewDataWeatherCity: viewDataWeatherCity,\n      dataWeatherCity: dataWeatherCity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      viewDataWeatherCity: viewDataWeatherCity,\n      dataWeatherCity: dataWeatherCity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ffs5YXW31v2iuRxcfIids+mGy6k=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/nikitarukoleev/Desktop/app-weather/src/App.js"],"names":["React","axios","Header","Main","Footer","DATA_CITIES","App","russianCitiesData","setRussianCitiesData","useState","dataWeatherCity","setDataWeatherCity","viewDataWeatherCity","setViewDataWeatherCity","displaySearchResults","setDisplaySearchResults","cityName","setCityName","searchValue","setSearchValue","console","log","main","filtredItemsArrayCities","filter","item","hasOwnProperty","filterCity","searchText","listOfCity","city","toLowerCase","includes","useEffect","debounce","setTimeout","filtredCity","clearTimeout","generatingObjectWithWeatherData","objData","getDataWeather","arrGeoPositionData","get","process","env","REACT_APP_OPENWEATHER_KEY","then","res","data","error","handlerClickOnCity","e","target","textContent","forEach","index","geo_lat","geo_lon","onChangeSearchInput","value","changeCity"],"mappings":"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","sourcesContent":["// для градуса &deg;\n\n// сделать крестик\n// закрытие блока поиска при клике на другую область \n// разобраться с местоположением\n// вывести погоду и все данные \n\nimport React from 'react';\nimport axios from 'axios';\n\nimport Header from './components/Header/Header';\nimport Main from './components/Main/Main';\nimport Footer from './components/Footer/Footer';\n\nimport DATA_CITIES from './arrayItemsCities.json'\n\nimport './App.scss';\n\n\n\nfunction App() {\n  const [russianCitiesData, setRussianCitiesData] = React.useState([]); \n  const [dataWeatherCity, setDataWeatherCity] = React.useState({}); \n  const [viewDataWeatherCity, setViewDataWeatherCity] = React.useState(false); \n  const [displaySearchResults, setDisplaySearchResults] = React.useState(false);\n  const [cityName, setCityName] = React.useState('');\n  const [searchValue, setSearchValue] = React.useState(''); \n\n\n  console.log(dataWeatherCity.main);\n  const filtredItemsArrayCities = DATA_CITIES.filter(item => item.hasOwnProperty('city'));\n\n  const filterCity = (searchText, listOfCity) => {\n    if (!searchText) {\n      setDisplaySearchResults(false);\n      return listOfCity;\n    }\n    \n    return listOfCity.filter(({ city }) => city.toLowerCase().includes(searchText.toLowerCase()));\n  }\n\n  React.useEffect(() => {\n    const debounce = setTimeout(() => {\n      const filtredCity = filterCity(searchValue, filtredItemsArrayCities);\n      setRussianCitiesData(filtredCity);\n    }, 300);\n\n    return () => clearTimeout(debounce)\n  }, [searchValue]);\n\n  const generatingObjectWithWeatherData = (objData) => {\n    // console.log(objData);\n    // if (objData.length) {\n    //   for(key in objData) {\n    //     console.log(key);\n    //   }\n    // }\n  };\n\n  const getDataWeather = (arrGeoPositionData) => {\n    try {\n      axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${arrGeoPositionData[0]}&lon=${arrGeoPositionData[1]}&units=metric&lang=ru&appid=${process.env.REACT_APP_OPENWEATHER_KEY}`).then(res => {\n        setDataWeatherCity(res.data); // передача в хук объекта api\n        setViewDataWeatherCity(res.data);\n      });\n    } catch(error) {\n      console.log(error);\n    }\n  }\n\n  // обработчик клика на элемент списка\n  const handlerClickOnCity = (e) => {\n    let cityName = e.target.textContent;\n\n    setCityName(cityName);\n\n    filtredItemsArrayCities.forEach((item, index) => {\n      if (cityName === item.city) {\n        getDataWeather([item.geo_lat, item.geo_lon]);\n      }\n    }) \n\n    setSearchValue(cityName);\n    setDisplaySearchResults(false);\n    // setCityName(cityName);\n  }\n\n  const onChangeSearchInput = (e) => {\n    setSearchValue(e.target.value);\n    setDisplaySearchResults(true);\n  }\n\n  const changeCity = () => {\n    setCityName(false);\n    setSearchValue('');\n    setViewDataWeatherCity(false);\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <Header\n        cityName={cityName}\n        onChangeSearchInput={onChangeSearchInput}\n        searchValue={searchValue}\n        changeCity={changeCity}\n        displaySearchResults={displaySearchResults}\n        russianCitiesData={russianCitiesData}\n        handlerClickOnCity={handlerClickOnCity}\n      />\n\n      <Main \n        viewDataWeatherCity={viewDataWeatherCity}\n        dataWeatherCity={dataWeatherCity}\n      />\n\n      <Footer \n        viewDataWeatherCity={viewDataWeatherCity}\n        dataWeatherCity={dataWeatherCity}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}